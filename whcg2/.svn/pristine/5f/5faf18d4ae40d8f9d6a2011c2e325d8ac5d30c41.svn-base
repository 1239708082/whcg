package com.ltsk.whcg.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import com.ltsk.whcg.entity.User;
import com.ltsk.whcg.listener.XZQHListener;
import com.ltsk.whcg.service.AnnotationService;
import com.ltsk.whcg.service.UserService;
import com.ltsk.whcg.utils.DateTime;
import com.ltsk.whcg.utils.Des;
import com.ltsk.whcg.utils.Result;
import com.ltsk.whcg.utils.ResultUtils;

import net.sf.json.JSONObject;

@Controller
public class UserController {
	@Autowired
	private UserService userService;
	@Autowired
	private AnnotationService annotationService;
	@Autowired
	private StringRedisTemplate template;

    @PostMapping(value = "/toLogin")
    @ResponseBody
    public Result toLogin(@RequestBody User user2, HttpSession session, HttpServletRequest request,
                          HttpServletResponse response) {
    	
        // 封装用户数据
        try {
            user2.setUsername(java.net.URLDecoder.decode(user2.getUsername(), "UTF-8"));
            String types = user2.getTypes();
            String password = null;
            if ("0".equals(types)) {
                String jiami = java.net.URLEncoder.encode(user2.getPassword(), "utf-8");
                password = Des.toHexString(Des.encrypt(jiami, "WHCGNETA")).toUpperCase();
            } else if ("1".equals(types)) {
                User findByName = userService.findByName(user2.getUsername());

                password = findByName.getPassword();
            }
            User findByName = userService.findByName(user2.getUsername());
            if (findByName == null) {
                return ResultUtils.error("用户名不存在");
            } else if (!findByName.getPassword().equalsIgnoreCase(password)) {
                return ResultUtils.error("密码错误");
            } else {
            	JSONObject userInfo = new JSONObject();
            	Map<String, String> usermap = new HashMap<>();
                Cookie cookie = new Cookie("JSESSIONID", session.getId());
                response.addCookie(cookie);
                List<String> roleName = userService.getRoleName(findByName.getUserid());
                roleName.add("基础数据");
                userInfo.put("role", roleName.toString());
                userInfo.put("username", user2.getUsername());
                userInfo.put("xzqh", findByName.getXzqh());
                userInfo.put("xzqh_str", XZQHListener.XZQHMap.get(findByName.getXzqh()));
                userInfo.put("id", findByName.getId());
                userInfo.put("userid", findByName.getUserid());
                userInfo.put("type", findByName.getType());
                userInfo.put("token", session.getId());
                template.opsForValue().set(session.getId(), userInfo.toString());
                session.setAttribute("user", userInfo);
                session.setMaxInactiveInterval(-1);
                usermap.put("token", session.getId());
                return ResultUtils.success(usermap);
            }
        } catch (Exception e) {
            return ResultUtils.error("系统错误，请联系管理员");
        }
    }

    @RequestMapping(value = "/addUser")
    @ResponseBody
    public Result addUser(@RequestBody User user, HttpSession session) {
        if (user.getUsername() == null || user.getRoleId() == null || user.getUsername().equals("")
                || user.getRoleId().equals(""))
            return ResultUtils.error("请传递有效的用户名和角色id");
        User findByName = userService.findByName(user.getUsername());
        boolean flag = !annotationService.isUser(user.getUsername());
        // //flag为true
        if (findByName == null) {
            boolean addUser = userService.addUser(user);
            if (addUser) {
                annotationService.register(user.getUsername(), "123456");
                // //协同标注用户同步注册
                return ResultUtils.success();
            } else {
                return ResultUtils.error("注册失败");
            }
        } else {
            return ResultUtils.error("该用户已注册");
        }

    }

    @RequestMapping("/checkLogin")
    @ResponseBody
    public Result checkLogin(HttpSession session, HttpServletRequest request) {

        String userInfo = (String) session.getAttribute("ssoclientagent.user");
        String token = request.getHeader("token");
        User findByName = null;
        if(userInfo!=null){
        	findByName = userService.findByName(userInfo);
        	List<String> roleName = userService.getRoleName(findByName.getUserid());
        	roleName.add("基础数据");
        	findByName.setRole(roleName.toString());
        }
        String checkInfo = null;
        if(token!=null) {
             checkInfo = template.opsForValue().get(token);
        }
		if (checkInfo != null) {
			checkInfo = checkInfo.trim();
			return ResultUtils.success(JSONObject.fromObject(checkInfo));
		} else if (findByName != null ){
			return ResultUtils.success(JSONObject.fromObject(findByName));
		}else {
			return ResultUtils.error("没有登录");
		}
    }

    /**
     * 同步修改两个系统密码
     */
    @RequestMapping("/changePassword")
    @ResponseBody
    public Result updatePwd(String username, String password) {
        boolean results = userService.updatePwd(password, username, DateTime.getCurrentTime());
        boolean annotationStatus = annotationService.changePassword(username, password);
        if (results && annotationStatus) {
            return ResultUtils.success("修改成功");
        } else if (!results && annotationStatus) {
            return ResultUtils.error("监管修改密码失败，请联系管理员");
        } else if (results && !annotationStatus) {
            return ResultUtils.error("协同标注修改密码失败，请联系管理员");
        } else {
            return ResultUtils.error("修改密码失败");
        }
    }

    /**
     * 注销用户
     *
     * @param username
     */
    @RequestMapping("/deleteUser")
    @ResponseBody
    public Result deleteUser(String username) {
        return userService.deleteUser(username);
    }

    /**
     * 协同标注密码查询
     *
     * @param username
     */
    @RequestMapping("/getAnnotation")
    @ResponseBody
    public Result getPassword(String username) {
        try {
            java.net.URLDecoder.decode(username, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return annotationService.getPassword(username);
    }

    /**
     * 权限列表
     */
    @RequestMapping("/getRoleArr")
    @ResponseBody
    public Result getRoleArr() {
        return userService.getRoleIdbyName();
    }

    /**
     * 注销登录
     *
     * @param request
     * @return
     */
    @RequestMapping("/logout")
    @ResponseBody
    public Result logout(HttpSession session, HttpServletRequest request,HttpServletResponse response) {
        session.invalidate();
        String token = request.getHeader("token");
        if (template.opsForValue().get(token) != null) {
            template.delete(token);
        } 
        return ResultUtils.success();

    }
}
