package com.ltsk.whcg.listener;

import com.ltsk.whcg.entity.Server;
import com.ltsk.whcg.zhjg.mapper.ServerMapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.context.support.WebApplicationContextUtils;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.annotation.WebListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

@WebListener
@Slf4j
public class ServerListener implements ServletContextListener {
    @Autowired
    private ServerMapper serverMapper;

    public static Map<String,String> SERVER=new HashMap<>();

    @Override
    public void contextInitialized(ServletContextEvent servletContextEvent) {
        WebApplicationContextUtils.getRequiredWebApplicationContext(servletContextEvent.getServletContext())
                .getAutowireCapableBeanFactory().autowireBean(this);
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>());
        executor.execute(()-> {
            while (true) {
                try {
                    List<Server> allServer = serverMapper.findAllServer();
                    for (Server server:allServer) {
                        SERVER.put(server.getName(),server.getChineseName());
                    }
                    log.info("服务数据更新成功");
                    Thread.sleep(24*60*60*1000);//一天一更新
                } catch (Exception e) {
                    log.error("服务数据更新失败！"+e.getMessage());
                    try {
                        Thread.sleep(24*60*60*1000);
                    } catch (Exception e1) {
                        e1.printStackTrace();
                    }
                    e.printStackTrace();
                    continue;
                }
            }
        });
    }

    @Override
    public void contextDestroyed(ServletContextEvent servletContextEvent) {

    }
}
