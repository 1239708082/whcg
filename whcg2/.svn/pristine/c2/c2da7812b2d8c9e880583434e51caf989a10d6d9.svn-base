package com.ltsk.whcg.shiro;

import java.io.UnsupportedEncodingException;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;

import com.ltsk.whcg.entity.User;
import com.ltsk.whcg.service.UserService;
import com.ltsk.whcg.utils.DESUtil;
import com.ltsk.whcg.utils.Des;

/**
 * author:ZhouDong 自定义Realm
 */
public class UserRealm extends AuthorizingRealm {
	@Autowired
	private UserService userService;

	// 授权
	@Override
	protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
		// 资源授权
		// 连接数据库 查授权
		// 获得当前登录用户
		SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();
		Subject subject = SecurityUtils.getSubject();
		User user=(User) subject.getPrincipal();
		
		return null;
	}

	// 认证
	@Override
	protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken arg) throws AuthenticationException {
		UsernamePasswordToken token = (UsernamePasswordToken) arg;
//		User user = userService.findByName(token.getUsername());
		User user=null;
		user = userService.findByName(token.getUsername());
		// 编写shiro判断用户名密码逻辑
		// 判断用户名
		if (user == null) {
			// 用户名不存在
			return null;// shiro底层会抛出UnknownAccountException
		}
		// 判断密码
		String decode_password=null;
		try {
			decode_password = java.net.URLDecoder.decode(Des.decrypt(user.getPassword(),"WHCGNETA"), "utf-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new SimpleAuthenticationInfo(user, decode_password, "");
	}

}
